@page
@model api_flms_service.Pages.Books.ManageModel
@{
    ViewData["Title"] = "Manage Book";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}

<div class="container">
    <h4 class="text-center" id="pageTitle">Add or Edit a Book</h4>
    <br>
    <form id="manageBookForm">
        <div class="form-group">
            <label for="bookName">Book Name:</label>
            <input type="text" id="bookName" class="form-control" required>
        </div>
        <div class="form-group">
            <label for="authorId">Author:</label>
            <select id="authorId" class="form-control" required></select>
        </div>
        <div class="form-group">
            <label for="catId">Category:</label>
            <select id="catId" class="form-control" required></select>
        </div>
        <div class="form-group">
            <label for="bookNo">Book Number:</label>
            <input type="number" id="bookNo" class="form-control" required>
        </div>
        <div class="form-group">
            <label for="bookPrice">Book Price:</label>
            <input type="number" id="bookPrice" class="form-control" required>
        </div>
        <button type="submit" class="btn btn-primary" id="submitButton">Add Book</button>
    </form>
    <div id="message" class="mt-3"></div>
</div>



@* <div class="card mx-auto text-center" style="padding:20px; border-radius:20px;max-width:500px; align-content:center; margin:auto">
    <h4 class=" display-5 fw-bold text-body-emphasis rounded text-center  p-3">Add new Category</h4>
    @if (Model.errorMessage.Length > 0)
    {
        <div class='alert alert-warning alert-dismissible fade show' role='alert'>
            <strong>@Model.errorMessage</strong>
            <button type='button' class='btn-close' data-bs-dismiss='alert' aria-label='Close'></button>
        </div>
    }
    <form method="POST" enctype="multipart/form-data">



        <input class="form-control" style="border-radius:20px" asp-for="Book.Title" placeholder="Enter the title" />
        <span asp-validation-for="Book.Title" class="text-danger"></span>
        <br />
        <input class="form-control" style="border-radius:20px" asp-for="Book.PublicationYear" placeholder="Enter the publication year" />
        <span asp-validation-for="Book.PublicationYear" class="text-danger"></span>
        <br />
        <input class="form-control" style="border-radius:20px" asp-for="Book.ISBN" placeholder="Enter the ISBN" />
        <span asp-validation-for="Book.ISBN" class="text-danger"></span>
        <br />
        <select id="authorId" class="form-select" style="border-radius:20px" asp-for="authorId">
            <option value="">Select an author</option>
            @foreach (var item in Model.authors)
            {
                <option value="@item.AuthorId" style="border-radius:20px">@item.FirstName @item.LastName</option>
            }
        </select>
        <span asp-validation-for="authorId" class="text-danger"></span>
        <br />
        <select id="Category1" class="form-select" style="border-radius:20px" asp-for="Category1">
            @foreach (var item in Model.categories)
            {
                <option value="@item.CategoryId" style="border-radius:20px">@item.CategoryName</option>
            }
        </select>
        <span asp-validation-for="Category1" class="text-danger"></span>
        <br />
        <select id="Category2" class="form-select" style="border-radius:20px" asp-for="Category2">
            @foreach (var item in Model.categories)
            {
                <option value="@item.CategoryId" style="border-radius:20px">@item.CategoryName</option>
            }
        </select>
        <span asp-validation-for="Category2" class="text-danger"></span>
        <br />
        <select id="Category3" class="form-select" style="border-radius:20px" asp-for="Category3">
            @foreach (var item in Model.categories)
            {
                <option value="@item.CategoryId" style="border-radius:20px">@item.CategoryName</option>
            }
        </select>
        <span asp-validation-for="Category3" class="text-danger"></span>
        <br />
        <textarea class="form-control" style="border-radius:20px" asp-for="Book.BookDescription" placeholder="Enter book description"></textarea>
        <span asp-validation-for="Book.BookDescription" class="text-danger"></span>

        <br />

        <input class="form-control" type="file" id="Photo" style="border-radius:20px" asp-for="formFile" />
        <span asp-validation-for="formFile" class="text-danger"></span>

        <br />
        <div class="row mb-3">
            <div class="col d-grid">
                <button type="submit" class="btn btn-outline-primary" style="border-radius:20px" href="/Index">Add Book</button>
            </div>
            <div class="col d-grid">
                <a href="/" style="border-radius:20px" class="btn btn-outline-secondary">Cancel</a>
            </div>
        </div>



    </form>
</div> *@

<script>
    const urlParams = new URLSearchParams(window.location.search);
    const bookId = urlParams.get('id');

    async function fetchDropdownData() {
        try {
            const [authorsResponse, categoriesResponse] = await Promise.all([
                fetch('/api/v0/authors'),
                fetch('/api/v0/category')
            ]);

            const authors = await authorsResponse.json();
            const categories = await categoriesResponse.json();

            const authorSelect = document.getElementById('authorId');
            const categorySelect = document.getElementById('catId');

            authors.forEach(author => {
                const option = document.createElement('option');
                option.value = author.authorId;
                option.textContent = author.authorName;
                authorSelect.appendChild(option);
            });

            categories.forEach(category => {
                const option = document.createElement('option');
                option.value = category.catId;
                option.textContent = category.catName;
                categorySelect.appendChild(option);
            });
        } catch (err) {
            document.getElementById('message').innerHTML = `<div class="alert alert-danger">Error loading authors or categories.</div>`;
        }
    }

    async function fetchBook() {
        if (bookId) {
            document.getElementById('pageTitle').innerText = "Edit Book";
            document.getElementById('submitButton').innerText = "Update Book";

            try {
                const response = await fetch(`/api/v0/books/${bookId}`);
                if (response.ok) {
                    const book = await response.json();
                    document.getElementById('bookName').value = book.bookName;
                    document.getElementById('authorId').value = book.authorId;
                    document.getElementById('catId').value = book.catId;
                    document.getElementById('bookNo').value = book.bookNo;
                    document.getElementById('bookPrice').value = book.bookPrice;
                } else {
                    document.getElementById('message').innerHTML = `<div class="alert alert-danger">Book not found.</div>`;
                }
            } catch (err) {
                document.getElementById('message').innerHTML = `<div class="alert alert-danger">Error loading book data.</div>`;
            }
        }
    }

    document.getElementById('manageBookForm').addEventListener('submit', async function (e) {
        e.preventDefault();
        const bookData = {
            bookName: document.getElementById('bookName').value,
            authorId: parseInt(document.getElementById('authorId').value),
            catId: parseInt(document.getElementById('catId').value),
            bookNo: parseInt(document.getElementById('bookNo').value),
            bookPrice: parseInt(document.getElementById('bookPrice').value),
        };

        if (bookId) {
            bookData.bookId = parseInt(bookId);
        }

        try {
            const method = bookId ? 'PUT' : 'POST';
            const url = '/api/v0/books';

            const response = await fetch(url, {
                method: method,
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(bookData),
            });

            if (response.ok) {
                document.getElementById('message').innerHTML = `<div class="alert alert-success">${bookId ? "Book updated" : "Book added"} successfully!</div>`;
                if (!bookId) document.getElementById('manageBookForm').reset();
                window.location.href = "/Books";
            } else {
                const error = await response.json();
                document.getElementById('message').innerHTML = `<div class="alert alert-danger">${error.message}</div>`;
            }
        } catch (err) {
            document.getElementById('message').innerHTML = `<div class="alert alert-danger">Error saving book.</div>`;
        }
    });

    fetchDropdownData();
    fetchBook();
</script>
