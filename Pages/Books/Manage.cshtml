@page "{id:int?}"
@model api_flms_service.Pages.Books.ManageModel
@{
    ViewData["Title"] = "Manage A Book";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}

<!-- Axios for AJAX form submission -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.8.4/axios.min.js" integrity="sha512-2A1+/TAny5loNGk3RBbk11FwoKXYOMfAK6R7r4CpQH7Luz4pezqEGcfphoNzB7SM4dixUoJsKkBsB6kg+dNE2g==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

<!-- FilePond for file uploads -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/filepond/4.32.7/filepond.min.js" integrity="sha512-/kcyaB84QgojPP9E91b3lmeLZXKMG6wGqIGaTIld4RtbyTBFB0DHBSL7/WPwU/fAftwmpvYYvdq/S96smP8Ppw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/filepond/4.32.7/filepond.min.css" integrity="sha512-FJiY0+cfDomcgiTe/XuOgtE7QW6R0NGnCDonCOgVztYK7+USa0Y5a3LoUcXUhfCjDq9oJ91hqyThq2eN69OZBg==" crossorigin="anonymous" referrerpolicy="no-referrer" />

<div class="container">
    <div class="left-column">
        <div id="currentImageContainer" style="display: none;">
            <label>Current Image:</label>
            <img id="currentImage" src="" alt="Book Image" />
        </div>
    </div>

    <div class="right-column">
        <h4 class="text-center" id="pageTitle"></h4>
        <br>
        <form id="manageBookForm">
            <input type="hidden" id="bookId" name="bookId" />

            <!-- Book Name -->
            <div class="form-group">
                <label for="bookName">Book Name:</label>
                <input type="text" id="bookName" name="bookName" class="form-control" required />
            </div>

            <!-- Author Dropdown -->
            <div class="form-group">
                <label for="authorId">Author:</label>
                <select id="authorId" name="authorId" class="form-control" required>
                    <option value="">Select Author</option>
                </select>
            </div>

            <!-- Categories Dropdown -->
            <div class="form-group">
                <label for="categoryIds">Categories:</label>
                <select id="categoryIds" name="categoryIds" class="form-control" multiple required>
                </select>
                <small class="form-text text-muted">Hold Ctrl (Windows) or Cmd (Mac) to select multiple categories.</small>
            </div>

            <!-- ISBN -->
            <div class="form-group">
                <label for="bookNo">Book Number (ISBN):</label>
                <input type="text" id="bookNo" name="bookNo" class="form-control" required />
            </div>

            <!-- Price -->
            <div class="form-group">
                <label for="bookPrice">Price (Publication Year):</label>
                <input type="number" id="bookPrice" name="bookPrice" class="form-control" required />
            </div>

            <!-- Book Description -->
            <div class="form-group">
                <label for="bookDescription">Book Description:</label>
                <textarea id="bookDescription" name="bookDescription" class="form-control" rows="4"></textarea>
            </div>

            <!-- Available Copies -->
            <div class="form-group">
                <label for="availableCopies">Available Copies:</label>
                <input type="number" id="availableCopies" name="availableCopies" class="form-control" min="0" required />
            </div>

            <!-- Image Upload -->
            <div class="form-group">
                <label for="bookFile">Images:</label>
                <input type="file" id="bookFile" name="bookFile" class="form-control-file" accept="image/*" />
            </div>

            <!-- Submit Button -->
            <button type="submit" class="btn btn-primary" id="submitButton">Add Book</button>
            <a href="/Books" class="btn btn-secondary">Cancel</a>
        </form>

        <div id="message" class="mt-3"></div>
    </div>
</div>

<script>
    const bookId = new URLSearchParams(window.location.search).get('id');

    // Initialize FilePond for image uploads
    const pond = FilePond.create(document.querySelector('#bookFile'));

    async function fetchDropdownData() {
        try {
            const [authorsResponse, categoriesResponse] = await Promise.all([
                fetch('/api/v0/authors'),
                fetch('/api/v0/category')
            ]);

            if (!authorsResponse.ok || !categoriesResponse.ok) {
                throw new Error('Failed to fetch dropdown data');
            }

            const authors = await authorsResponse.json();
            const categories = await categoriesResponse.json();

            const authorSelect = document.getElementById('authorId');
            const categorySelect = document.getElementById('categoryIds');

            authors.forEach(author => {
                const option = document.createElement('option');
                option.value = author.authorId;
                option.textContent = author.name;
                authorSelect.appendChild(option);
            });

            categories.forEach(category => {
                const option = document.createElement('option');
                option.value = category.categoryId;
                option.textContent = category.categoryName;
                categorySelect.appendChild(option);
            });
        } catch (err) {
            console.error("Error loading authors or categories", err);
            document.getElementById('message').innerHTML = `<div class="alert alert-danger">Error loading authors or categories.</div>`;
        }
    }

    async function fetchBook() {
        if (!bookId) {
            document.getElementById('pageTitle').textContent = 'Add New Book';
            document.getElementById('submitButton').textContent = 'Add Book';
            return;
        }

        try {
            const response = await fetch(`/api/v0/books/${bookId}`);
            if (!response.ok) {
                throw new Error('Failed to fetch book data');
            }

            const book = await response.json();
            document.getElementById('pageTitle').textContent = 'Edit Book';
            document.getElementById('submitButton').textContent = 'Update Book';
            document.getElementById('bookId').value = book.bookId || '';
            document.getElementById('bookName').value = book.bookName || '';
            document.getElementById('authorId').value = book.authorId || '';
            document.getElementById('bookNo').value = book.bookNo || '';
            document.getElementById('bookPrice').value = book.bookPrice || '';
            document.getElementById('bookDescription').value = book.bookDescription || '';
            document.getElementById('availableCopies').value = book.availableCopies || 0;

            const categorySelect = document.getElementById('categoryIds');
            if (book.categories && Array.isArray(book.categories)) {
                book.categories.forEach(cat => {
                    const option = Array.from(categorySelect.options).find(opt => opt.value == cat.categoryId);
                    if (option) {
                        option.selected = true;
                    }
                });
            }

            if (book.imageUrls) {
                document.getElementById('currentImageContainer').style.display = 'block';
                document.getElementById('currentImage').src = book.imageUrls;
            }
        } catch (err) {
            console.error("Error loading book", err);
            document.getElementById('message').innerHTML = `<div class="alert alert-danger">Error loading book data.</div>`;
        }
    }

    document.getElementById('manageBookForm').addEventListener('submit', async function (e) {
        e.preventDefault();

        const formData = new FormData();
        formData.append('bookId', document.getElementById('bookId').value);
        formData.append('bookName', document.getElementById('bookName').value);
        formData.append('authorId', document.getElementById('authorId').value);
        formData.append('bookNo', document.getElementById('bookNo').value);
        formData.append('bookPrice', document.getElementById('bookPrice').value);
        formData.append('bookDescription', document.getElementById('bookDescription').value);
        formData.append('availableCopies', document.getElementById('availableCopies').value);

        const categoryIds = Array.from(document.getElementById('categoryIds').selectedOptions).map(option => option.value);
        categoryIds.forEach(id => formData.append('categoryIds', id));

        let imageUrl = null;
        if (pond.getFiles().length > 0) {
            try {
                // Upload file to Cloudinary first
                const file = pond.getFiles()[0].file;
                const uploadFormData = new FormData();
                uploadFormData.append('file', file);

                const uploadResponse = await axios.post('/api/v0/books/upload', uploadFormData, {
                    headers: {
                        'Content-Type': 'multipart/form-data'
                    }
                });

                if (uploadResponse.status === 200) {
                    imageUrl = uploadResponse.data.fileUrl;
                    console.log("File uploaded to Cloudinary, URL:", imageUrl);
                    formData.append('imageUrls', imageUrl); // Add the URL to FormData
                }
            } catch (uploadErr) {
                console.error("Error uploading file to Cloudinary:", uploadErr);
                document.getElementById('message').innerHTML = `<div class="alert alert-danger">Error uploading file to Cloudinary: ${uploadErr.message}</div>`;
                return;
            }
        } else {
            console.log("No file selected.");
        }

        console.log("FormData entries:");
        for (let pair of formData.entries()) {
            console.log(`${pair[0]}: ${pair[1]}`);
        }

        const method = bookId ? 'PUT' : 'POST';
        const url = bookId ? `/api/v0/books/${bookId}` : '/api/v0/books';

        try {
            const response = await axios({
                method: method,
                url: url,
                data: formData,
                headers: {
                    'Content-Type': 'multipart/form-data'
                }
            });

            if (response.status === 200 || response.status === 201) {
                document.getElementById('message').innerHTML = `<div class="alert alert-success">${bookId ? "Book updated" : "Book added"} successfully!</div>`;
                setTimeout(() => window.location.href = "/Books", 1000);
            }
        } catch (err) {
            console.error("Error saving book:", err);
            const errorMessage = err.response?.data?.message || err.message;
            let errorDetails = "No additional details available.";
            if (err.response?.data?.details) {
                try {
                    const parsedDetails = JSON.parse(err.response.data.details);
                    errorDetails = JSON.stringify(parsedDetails, null, 2);
                } catch (parseError) {
                    errorDetails = err.response.data.details;
                }
            }
            document.getElementById('message').innerHTML = `<div class="alert alert-danger">Error saving book: ${errorMessage}. Details: ${errorDetails}</div>`;
        }
    });

    fetchDropdownData();
    fetchBook();
</script>