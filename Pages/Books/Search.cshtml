@* @page
@model api_flms_service.Pages.Books.SearchModel
@{
    ViewData["Title"] = "Homepage - Book Search";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f7fc;
            margin: 0;
            padding: 0;
        }
        header {
            background-color: #5c6bc0;
            padding: 10px;
            color: white;
            text-align: center;
        }
        .container {
            max-width: 1200px;
            margin: 20px auto;
            padding: 0 15px;
        }
        .search-box {
            display: flex;
            flex-direction: column;
            gap: 15px;
            margin-bottom: 30px;
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        .search-form {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
        }
        .form-group {
            flex: 1 0 200px;
        }
        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        .form-control {
            width: 100%;
            padding: 10px;
            font-size: 16px;
            border-radius: 5px;
            border: 1px solid #ddd;
            box-sizing: border-box;
        }
        .btn-search {
            padding: 10px 20px;
            background-color: #5c6bc0;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            margin-top: 25px;
        }
        .btn-search:hover {
            background-color: #3e4db8;
        }
        .results-container {
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        .results-header {
            font-size: 1.5rem;
            margin-bottom: 20px;
            color: #333;
        }
        .empty-results {
            text-align: center;
            color: #666;
            font-size: 1.2rem;
            padding: 30px 0;
        }
        table {
            width: 100%;
            border-collapse: collapse;
        }
        table th, table td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #eee;
        }
        table th {
            background-color: #f8f9fa;
            font-weight: bold;
            color: #333;
        }
        table tr:hover {
            background-color: #f1f4f9;
        }
        .text-danger {
            color: #dc3545;
            margin-bottom: 15px;
        }
    </style>
</head>
<body>
    <header>
        <h1>Book Search</h1>
    </header>

    <div class="container">
        <div class="search-box">
            <form method="get" class="search-form">
                <div class="form-group">
                    <label for="bookName">Book Name</label>
                    <input type="text" id="bookName" class="form-control" name="bookName" placeholder="Enter book name" value="@Request.Query["bookName"]" />
                </div>
                
                <div class="form-group">
                    <label for="authorName">Author Name</label>
                    <input type="text" id="authorName" class="form-control" name="authorName" placeholder="Enter author name" value="@Request.Query["authorName"]" />
                </div>
                
                <div class="form-group">
                    <label for="categoryId">Category</label>
                    <select id="categoryId" class="form-control" name="categoryId">
                        <option value="">All Categories</option>
                        @foreach (var category in Model.Categories)
                        {
                            <option value="@category.CatId" @(category.CatId.ToString() == Request.Query["categoryId"] ? "selected" : "")>@category.CatName</option>
                        }
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="minPrice">Min Price</label>
                    <input type="number" id="minPrice" class="form-control" name="minPrice" placeholder="Min price" value="@Request.Query["minPrice"]" step="0.01" min="0" />
                </div>
                
                <div class="form-group">
                    <label for="maxPrice">Max Price</label>
                    <input type="number" id="maxPrice" class="form-control" name="maxPrice" placeholder="Max price" value="@Request.Query["maxPrice"]" step="0.01" min="0" />
                </div>
                
                <div class="form-group">
                    <button type="submit" class="btn-search">
                        <i class="fas fa-search"></i> Search
                    </button>
                </div>
            </form>
        </div>

        <div class="results-container">
            @if (!ModelState.IsValid)
            {
                <div class="text-danger">
                    @foreach (var error in ModelState.Values.SelectMany(v => v.Errors))
                    {
                        <p>@error.ErrorMessage</p>
                    }
                </div>
            }

            <div class="results-header">
                @if (Model.Books != null && Model.Books.Any())
                {
                    <p>Found @Model.Books.Count() result@(Model.Books.Count() == 1 ? "" : "s")</p>
                }
                else
                {
                    <p class="empty-results">No results found. Try changing your search criteria.</p>
                }
            </div>

            @if (Model.Books != null && Model.Books.Any())
            {
                <table>
                    <thead>
                        <tr>
                            <th>Book Name</th>
                            <th>Author</th>
                            <th>Category</th>
                            <th>Price</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var book in Model.Books)
                        {
                            <tr>
                                <td>@book.BookName</td>
                                <td>@(book.Author?.AuthorName ?? "Unknown")</td>
                                <td>@(book.Category?.CatName ?? "Uncategorized")</td>
                                <td>@string.Format("{0:C}", book.BookPrice)</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</body>
</html> *@

@page
@model api_flms_service.Pages.Books.SearchModel

<h2>Search Books</h2>

<!-- Form Tìm kiếm -->
<form id="searchForm" onsubmit="return handleSearch(event)">
    <input type="text" id="bookName" placeholder="Book Name" />
    <input type="text" id="authorName" placeholder="Author Name" />
    <select id="categoryId">
        <option value="">Select Category</option>
        <!-- Categories will be populated by JavaScript -->
    </select>
    <input type="number" id="minPrice" placeholder="Min Price" />
    <input type="number" id="maxPrice" placeholder="Max Price" />
    <button type="submit">Search</button>
</form>

<!-- Khu vực Hiển thị kết quả -->
<div id="booksContainer" class="row">
    <!-- Data will be populated here by JavaScript -->
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Lấy danh sách Categories khi trang được tải
        fetch('/api/v0/category', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            }
        })
            .then(response => response.json()) // Chuyển phản hồi thành JSON
            .then(data => {
                const categorySelect = document.getElementById('categoryId');
                data.forEach(category => {
                    const option = document.createElement('option');
                    option.value = category.catId;
                    option.textContent = category.catName;
                    categorySelect.appendChild(option);
                });
            })
            .catch(error => console.error('Error loading categories:', error));
    });

    // Hàm xử lý khi form tìm kiếm được submit
    function handleSearch(event) {
        event.preventDefault(); // Ngăn không cho form submit mặc định

        const bookName = document.getElementById('bookName').value;
        const authorName = document.getElementById('authorName').value;
        const categoryId = document.getElementById('categoryId').value;
        const minPrice = document.getElementById('minPrice').value;
        const maxPrice = document.getElementById('maxPrice').value;

        // Gọi API để tìm kiếm sách
        let queryParams = [];
        if (bookName) queryParams.push(`bookName=${encodeURIComponent(bookName)}`);
        if (authorName) queryParams.push(`authorName=${encodeURIComponent(authorName)}`);
        if (categoryId) queryParams.push(`categoryId=${categoryId}`);
        if (minPrice) queryParams.push(`minPrice=${minPrice}`);
        if (maxPrice) queryParams.push(`maxPrice=${maxPrice}`);

        const queryString = queryParams.length > 0 ? '?' + queryParams.join('&') : '';

        fetch(`/api/v0/books/search${queryString}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            }
        })
            .then(response => response.json()) // Chuyển phản hồi thành JSON
            .then(data => {
                const container = document.getElementById('booksContainer');
                container.innerHTML = ''; // Xóa dữ liệu cũ trước khi hiển thị kết quả mới

                if (data.length === 0) {
                    container.innerHTML = '<p>No books found matching your search.</p>';
                } else {
                    data.forEach(book => {
                        const card = document.createElement('div');
                        card.classList.add('col-4', 'mb-4');

                        card.innerHTML = `
                            <div class="card" style="width: 18rem;">
                                    <img src="https://image.sggp.org.vn/w1000/Uploaded/2025/evofjasfzyr/2023_04_04/hay-khien-tuong-lai-biet-on-vi-hien-tai-ban-da-co-gang-het-minh-2-5901.jpg.webp" class="card-img-top" alt="${book.bookName}">
                                <div class="card-body">
                                    <h5 class="card-title">${book.bookName}</h5>
                                    <p class="card-text">${book.author.authorName}</p>
                                    <p class="card-text">Category: ${book.category.catName}</p>
                                    <p class="card-text">Price: ${book.bookPrice} VND</p>
                                    <a href="#" class="btn btn-primary">View Details</a>
                                </div>
                            </div>
                        `;

                        container.appendChild(card);
                    });
                }
            })
            .catch(error => console.error('Error searching books:', error));
    }
</script>

<!-- Bootstrap CSS (optional, you can use your own styling) -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
