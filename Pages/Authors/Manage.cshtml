@page
@model api_flms_service.Pages.Authors.ManageModel
@{
    ViewData["Title"] = "Manage Author";
    Layout = "~/Pages/Shared/_Layout.cshtml"; // Path to your layout file
}

<div class="container">
    <h4 class="text-center" id="pageTitle">Add or Edit an Author</h4>
    <br>
    <form id="manageAuthorForm">
        <div class="form-group">
            <label for="authorName">Author Name:</label>
            <input type="text" id="authorName" class="form-control" required>
        </div>
        <button type="submit" class="btn btn-primary" id="submitButton">Add Author</button>
    </form>
    <div id="message" class="mt-3"></div>
</div>

<script>
    const urlParams = new URLSearchParams(window.location.search);
    const authorId = urlParams.get('id');

    // Kiểm tra authorId có hợp lệ không
    const isValidId = authorId && !isNaN(authorId) && authorId.trim() !== "";

    async function fetchAuthor() {
        if (isValidId) {
            document.getElementById('pageTitle').innerText = "Edit Author";
            document.getElementById('submitButton').innerText = "Update Author";

            try {
                const response = await fetch(`/api/v0/authors/${authorId}`);
                if (response.ok) {
                    const author = await response.json();

                    // Kiểm tra nếu trường `name` tồn tại thì gán vào input
                    document.getElementById('authorName').value = author.name || author.authorName || "";
                } else {
                    document.getElementById('message').innerHTML = `<div class="alert alert-danger">Author not found.</div>`;
                }
            } catch (err) {
                document.getElementById('message').innerHTML = `<div class="alert alert-danger">An error occurred while fetching the author: ${err.message}</div>`;
            }
        }
    }

    fetchAuthor();

    document.getElementById('manageAuthorForm').addEventListener('submit', async function (e) {
        e.preventDefault();
        const authorName = document.getElementById('authorName').value.trim();

        try {
            const method = isValidId ? 'PUT' : 'POST';
            const url = isValidId ? `/api/v0/authors/${authorId}` : `/api/v0/authors`;
            const body = JSON.stringify({
                authorId: isValidId ? parseInt(authorId) : undefined,
                name: authorName // Thay vì `authorName`, API có thể dùng `name`
            });

            const response = await fetch(url, {
                method: method,
                headers: { 'Content-Type': 'application/json' },
                body: body
            });

            if (response.ok) {
                const successMessage = isValidId
                    ? "Author updated successfully!"
                    : "Author added successfully!";
                document.getElementById('message').innerHTML = `<div class="alert alert-success">${successMessage}</div>`;
                document.getElementById('manageAuthorForm').reset();

                setTimeout(() => {
                    window.location.href = "/authors";
                }, 1000);
            } else {
                const error = await response.json();
                document.getElementById('message').innerHTML = `<div class="alert alert-danger">${error.message || "An error occurred while saving the author."}</div>`;
            }
        } catch (err) {
            document.getElementById('message').innerHTML = `<div class="alert alert-danger">An error occurred while saving the author: ${err.message}</div>`;
        }
    });
</script>
