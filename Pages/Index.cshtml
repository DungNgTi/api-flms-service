@page
@model api_flms_service.Pages.IndexModel
@{
    ViewData["Title"] = "Library";
}

<div id="carouselExampleCaptions" class="carousel slide" data-ride="carousel">
    <ol class="carousel-indicators">
        <li data-target="#carouselExampleCaptions" data-slide-to="0" class="active"></li>
        <li data-target="#carouselExampleCaptions" data-slide-to="1"></li>
        <li data-target="#carouselExampleCaptions" data-slide-to="2"></li>
    </ol>
    <div class="carousel-inner">
        <div class="carousel-item active">
            <img src="https://res.cloudinary.com/dxmsosoui/image/upload/v1697910313/a63adbp4j5dsogcqwyfj.png" class="d-block w-100" style="opacity:100%" alt="...">
            <div class="carousel-caption d-none d-md-block">
                <h5>Welcome to Our Library</h5>
                <p>Discover a world of knowledge and imagination at our library. We're dedicated to bringing you the best in literature, from timeless classics to the latest bestsellers. Whether you're a bookworm, a student, or simply looking for a quiet space to read, you've come to the right place.</p>
            </div>
        </div>
        <div class="carousel-item">
            <img src="https://res.cloudinary.com/dxmsosoui/image/upload/v1697910502/w3vjgviktnq6qjepaxpw.png" class="d-block w-100" style="opacity:100%" alt="...">
            <div class="carousel-caption d-none d-md-block">
                <h5>Explore Our Collection</h5>
                <p>Our extensive collection spans various genres and subject areas. From fiction and non-fiction to academic resources, we have something for everyone. Dive into captivating stories, explore the depths of human knowledge, or embark on a journey of self-discovery through our books.</p>
            </div>
        </div>
        <div class="carousel-item">
            <img src="https://res.cloudinary.com/dxmsosoui/image/upload/v1697910717/rwnxyewxfi0s09ushwgz.png" class="d-block w-100" style="opacity:100%" alt="...">
            <div class="carousel-caption d-none d-md-block">
                <h5>A Hub for Learning and Inspiration</h5>
                <p>Beyond the books, our library is a hub for learning and inspiration. Attend book clubs, author talks, and workshops to enrich your understanding and spark your creativity. Our knowledgeable staff is here to assist you in your quest for knowledge.</p>
            </div>
        </div>
    </div>
    <a class="carousel-control-prev" href="#carouselExampleCaptions" role="button" data-slide="prev">
        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
        <span class="sr-only">Previous</span>
    </a>
    <a class="carousel-control-next" href="#carouselExampleCaptions" role="button" data-slide="next">
        <span class="carousel-control-next-icon" aria-hidden="true"></span>
        <span class="sr-only">Next</span>
    </a>
</div>
<br />

<!-- Search & Filter Section -->
<h1 class="display-4 fw-bold text-body text-center">Search & Filter Books</h1>
<hr class="featurette-divider">
<form method="get" action="" class="container">
    <div class="row g-3 align-items-end">
        <div class="col-md-4">
            <label for="searchTerm" class="form-label">Search Books</label>
            <input type="text" id="searchTerm" name="searchTerm" class="form-control"
                   placeholder="Enter book title..." value="@Request.Query["searchTerm"]" />
        </div>

        <div class="col-md-4">
            <label for="categoryName" class="form-label">Category</label>
            <select id="categoryName" name="categoryName" class="form-control">
                <option value="">All Categories</option>
                @foreach (var category in Model.Categories)
                {
                    <option value="@category.CategoryName" selected="@(category.CategoryName == Request.Query["categoryName"])">@category.CategoryName</option>
                }
            </select>
        </div>

        <div class="col-md-4">
            <div class="d-flex gap-2">
                <button type="submit" class="btn btn-primary">
                    <i class="bi bi-search me-1"></i> Search
                </button>
                <a href="/" class="btn btn-outline-secondary">
                    <i class="bi bi-x-circle me-1"></i> Reset
                </a>
            </div>
        </div>
    </div>
</form>


<!-- Search Results Feedback -->
@if (!string.IsNullOrEmpty(Request.Query["searchTerm"]) || !string.IsNullOrEmpty(Request.Query["categoryName"]))
{
    <div class="container mt-3">
        <div class="alert alert-info">
            <h4>Kết quả tìm kiếm</h4>
            <p>
                @if (!string.IsNullOrEmpty(Request.Query["searchTerm"]))
                {
                    <span>Từ khóa: "@Request.Query["searchTerm"]" </span>
                }
                @if (!string.IsNullOrEmpty(Request.Query["categoryName"]))
                {
                    <span>Thể loại: "@Request.Query["categoryName"]" </span>
                }
            </p>
            <p>Tìm thấy @Model.books.Count sách phù hợp với tiêu chí của bạn</p>
        </div>
    </div>
}

<h1 class="display-4 fw-bold text-body text-center">Best Authors</h1>
<hr class="featurette-divider">

<div class="container marketing">
    <div class="row author-list">
        @for (int i = 0; i < Model.authors.Count; i++)
        {
            var item = Model.authors[i];
            <div class="col-lg-4 text-center author-item @(i >= 3 ? "hidden-author" : "")">
                <img src="@item.CloudinaryId" alt="@item.Name" width="200" height="200" class="rounded-circle">
                <h2 class="fw-normal">@item.Name</h2>
                <div class="description-container">
                    <p class="description-text">@item.Biography</p>
                </div>
                <a href="#" class="read-more btn btn-link">Xem thêm</a>
                <p><a class="btn btn-secondary" href="/Authors/SeeAuthor?id=@(item.AuthorId)">View Author »</a></p>
            </div>
        }
    </div>
    @if (Model.authors.Count > 3)

    <!-- Search Results Feedback -->
    @if (!string.IsNullOrEmpty(Request.Query["searchTerm"]) ||
    !string.IsNullOrEmpty(Request.Query["categoryName"]))
    

    {
        <div class="text-center mt-3">
            <button type="button" class="toggle-authors btn btn-primary">Xem thêm</button>
        </div>
    }
    <hr class="featurette-divider">
</div>

<h1 class="display-4 fw-bold text-body text-center">
    @if (!string.IsNullOrEmpty(Request.Query["searchTerm"]) || !string.IsNullOrEmpty(Request.Query["categoryName"]))
    {
        <span>Kết quả tìm kiếm</span>
    }
    else
    {
        <span>Best Books</span>
    }
</h1>
<hr class="featurette-divider">

<div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-0 text-center">
    @if (Model.books.Count == 0 && (!string.IsNullOrEmpty(Request.Query["searchTerm"]) || !string.IsNullOrEmpty(Request.Query["categoryName"])))
    {
        <div class="col-12 text-center">
            <div class="alert alert-warning">
                <h4>Không tìm thấy sách phù hợp với tiêu chí của bạn</h4>
                <p>Vui lòng thử lại với các tiêu chí khác</p>
            </div>
        </div>
    }
    else
    {
        @foreach (var item in Model.PagedBooks)
        {
            <div class="col">
                <div class="card" style="width:19rem; padding:10px;margin:10px; border-radius:20px">
                    <a href="/Books/ShowBook?id=@(item.BookId)" style="text-decoration:none">
                        <img src="@item.CloudinaryImageId" class="card-img-top" style="border-radius:20px" alt="...">
                        <div class="card-body">
                            <h5 class="card-title" style="font-family:sans-serif; color:black">@item.Title</h5>
                            <ul class="list-group list-group-flush">
                                <li class="list-group-item">Author: @item.Author?.Name</li>
                            </ul>
                        </div>
                    </a>
                </div>
            </div>
        }
    }
</div>

<!-- Phân trang -->
@if (Model.TotalPages > 1)
{
    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center">
            <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                @{
                    var prevUrl = $"/Index?page={Model.CurrentPage - 1}";
                    if (!string.IsNullOrEmpty(Request.Query["searchTerm"]))
                    {
                        prevUrl += $"&searchTerm={Request.Query["searchTerm"]}";
                    }
                    if (!string.IsNullOrEmpty(Request.Query["categoryName"]))
                    {
                        prevUrl += $"&categoryName={Request.Query["categoryName"]}";
                    }
                }
                <a class="page-link" href="@prevUrl" aria-label="Previous">
                    <span aria-hidden="true">«</span>
                </a>
            </li>
            @for (int i = 1; i <= Model.TotalPages; i++)
            {
                var pageUrl = $"/Index?page={i}";
                if (!string.IsNullOrEmpty(Request.Query["searchTerm"]))
                {
                    pageUrl += $"&searchTerm={Request.Query["searchTerm"]}";
                }
                if (!string.IsNullOrEmpty(Request.Query["categoryName"]))
                {
                    pageUrl += $"&categoryName={Request.Query["categoryName"]}";
                }
                <li class="page-item @(Model.CurrentPage == i ? "active" : "")">
                    <a class="page-link" href="@pageUrl">@i</a>
                </li>
            }
            <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                @{
                    var nextUrl = $"/Index?page={Model.CurrentPage + 1}";
                    if (!string.IsNullOrEmpty(Request.Query["searchTerm"]))
                    {
                        nextUrl += $"&searchTerm={Request.Query["searchTerm"]}";
                    }
                    if (!string.IsNullOrEmpty(Request.Query["categoryName"]))
                    {
                        nextUrl += $"&categoryName={Request.Query["categoryName"]}";
                    }
                }
                <a class="page-link" href="@nextUrl" aria-label="Next">
                    <span aria-hidden="true">»</span>
                </a>
            </li>
        </ul>
    </nav>
}

<!-- Thêm CSS và JavaScript -->
<style>
    .description-container {
        position: relative;
    }

    .description-text {
        max-height: 80px; /* Giới hạn chiều cao ban đầu (khoảng 3-4 dòng) */
        overflow: hidden;
        transition: max-height 0.3s ease; /* Hiệu ứng mượt mà khi mở rộng/thu gọn */
    }

        .description-text.expanded {
            max-height: none; /* Bỏ giới hạn chiều cao để hiển thị toàn bộ nội dung */
        }

    .read-more {
        color: #007bff;
        cursor: pointer;
        display: block;
        margin-top: 5px;
        text-align: center;
    }

        .read-more:hover {
            text-decoration: underline;
        }

    /* CSS cho danh sách tác giả */
    .author-item {
        opacity: 1;
        transition: opacity 0.5s ease, max-height 0.5s ease; /* Hiệu ứng mượt mà cho opacity và max-height */
        max-height: 1000px; /* Giá trị lớn để chứa nội dung ban đầu */
        overflow: visible; /* Đảm bảo nội dung không bị cắt */
    }

        .author-item.hidden-author {
            opacity: 0;
            max-height: 0; /* Ẩn hoàn toàn */
            margin-top: 0;
            margin-bottom: 0;
            padding-top: 0;
            padding-bottom: 0;
        }

    .author-list.expanded .author-item {
        opacity: 1;
        max-height: 1000px; /* Hiện lại với chiều cao tối đa */
        margin-top: 0.5rem; /* Khôi phục margin */
        margin-bottom: 0.5rem;
        padding-top: 0.5rem;
        padding-bottom: 0.5rem;
    }

    /* CSS cho nút toggle-authors */
    .toggle-authors {
        cursor: pointer !important; /* Hiển thị con trỏ "pointer" khi hover */
        display: inline-block !important; /* Đảm bảo nút hiển thị đúng */
        position: relative !important; /* Đảm bảo nút không bị che */
        z-index: 10 !important; /* Tăng z-index để tránh bị che */
    }

        .toggle-authors:hover {
            opacity: 0.8 !important; /* Hiệu ứng hover nhẹ */
        }
</style>

<script>
    console.log('Script started'); // Log để kiểm tra script có chạy không

    document.addEventListener('DOMContentLoaded', function () {
        console.log('DOMContentLoaded event fired'); // Log để kiểm tra sự kiện

        // Xử lý "Xem thêm" cho Biography
        const readMoreLinks = document.querySelectorAll('.read-more');
        console.log('readMoreLinks:', readMoreLinks); // Log để kiểm tra
        readMoreLinks.forEach(link => {
            link.addEventListener('click', function (e) {
                e.preventDefault();
                const description = this.previousElementSibling.querySelector('.description-text'); // Lấy phần tử description-text
                if (description) {
                    description.classList.toggle('expanded'); // Thêm/xóa class expanded

                    // Thay đổi nội dung nút
                    if (description.classList.contains('expanded')) {
                        this.textContent = 'Thu gọn';
                    } else {
                        this.textContent = 'Xem thêm';
                    }
                }
            });
        });

        // Xử lý "Xem thêm" cho danh sách tác giả
        const toggleAuthorsBtn = document.querySelector('.toggle-authors');
        const authorList = document.querySelector('.author-list');
        console.log('toggleAuthorsBtn:', toggleAuthorsBtn); // Log để kiểm tra
        console.log('authorList:', authorList); // Log để kiểm tra
        if (toggleAuthorsBtn && authorList) {
            toggleAuthorsBtn.addEventListener('click', function (e) {
                e.preventDefault();
                e.stopPropagation(); // Ngăn sự kiện lan truyền
                console.log('Toggle authors button clicked'); // Log để kiểm tra
                authorList.classList.toggle('expanded'); // Thêm/xóa class expanded để hiện/ẩn các tác giả

                // Thay đổi nội dung nút
                if (authorList.classList.contains('expanded')) {
                    this.textContent = 'Thu gọn';
                } else {
                    this.textContent = 'Xem thêm';
                }
            }, { capture: false });

            // Thêm log khi hover
            toggleAuthorsBtn.addEventListener('mouseover', function () {
                console.log('Hover on toggle-authors button');
            });
        } else {
            console.error('toggleAuthorsBtn or authorList not found');
        }

        // Xử lý phân trang
        const pageLinks = document.querySelectorAll('.page-link');
        console.log('pageLinks:', pageLinks); // Log để kiểm tra
        pageLinks.forEach(link => {
            link.addEventListener('click', function (e) {
                e.preventDefault(); // Ngăn hành vi mặc định
                const url = this.getAttribute('href'); // Lấy URL từ href
                console.log('Navigating to:', url); // Log URL để kiểm tra
                if (url && !this.parentElement.classList.contains('disabled')) {
                    window.location.replace(url); // Chuyển hướng bằng window.location.replace
                }
            });
        });
    });
</script>